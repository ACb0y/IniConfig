//
// Created by ACb0y on 2022/3/20.
//

#include <string>
#include <map>
#include <iostream>
#include <fstream>
#include "CmdLine.h"
#include "Config.h"
#include "DemoConfig.h"

using namespace std;

string iniFile;     // ini格式的配置文件
string customClass; // 用户自定义的配置文件类名
string outputDir;   // 输出目录

void usage() {
  cout << "usage: configTool -iniFile cfgFile -customClass className" << endl;
  cout << "options:" << endl;
  cout << "   -h,--help       print usage" << endl;
  cout << "   -iniFile        config file" << endl;
  cout << "   -customClass    custom config class name" << endl;
  cout << "   -output         output dir" << endl;
  cout << endl;
}

void genFile(Config::Ini& ini) {
  string fileName = outputDir + "/" + customClass + "Config.h";
  // 打开文件
  ofstream hout(fileName);
  if (!hout.is_open()) {
    printf("open %s file failed\n", fileName.c_str());
    return;
  }
  hout << "/*" << endl;
  hout << " * Autogenerated by ConfigTool (1.0.0)" << endl;
  hout << " */" << endl;
  hout << endl;
  hout << "#pragma once" << endl;
  hout << endl;
  hout << "#include <string>" << endl;
  hout << "#include \"Config.h\"" << endl;
  hout << endl;

  map<string, map<string, string> >::iterator iter = ini.GetCfg().begin();
  while (iter != ini.GetCfg().end()) {
    hout << "struct " << customClass << "ConfigSection" << iter->first << " {" << endl;
    map<string, string>::iterator kvIter = iter->second.begin();
    while (kvIter != iter->second.end()) {
      hout << "  Config::Value " << kvIter->first << ";" << endl;
      kvIter++;
    }
    hout << "  void Load(Config::Ini& ini) {" << endl;
    kvIter = iter->second.begin();
    while (kvIter != iter->second.end()) {
      hout << "    " << kvIter->first << ".SetData(ini.GetStrValue(\"" << iter->first << "\", \"" << kvIter->first << "\", \"\"));" << endl;
      kvIter++;
    }
    hout << "  }" << endl;
    hout << "};" << endl;
    hout << endl;
    iter++;
  }

  hout << "class " << customClass << "Config {" << endl;
  hout << "public:" << endl;
  hout << "  bool Load(std::string fileName) {" << endl;
  hout << "    Config::Ini ini;" << endl;
  hout << "    if (!ini.Load(fileName)) {" << endl;
  hout << "      return false;" << endl;
  hout << "    }" << endl;
  iter = ini.GetCfg().begin();
  while (iter != ini.GetCfg().end()) {
    hout << "    " << iter->first << ".Load(ini);" << endl;
    iter++;
  }
  hout << "    return true;" << endl;
  hout << "  }" << endl;
  hout << endl;
  hout << "public:" << endl;
  iter = ini.GetCfg().begin();
  while (iter != ini.GetCfg().end()) {
    hout << "  " << customClass << "ConfigSection" << iter->first << " " << iter->first << ";" << endl;
    iter++;
  }
  hout << "};" << endl;
}

int main(int argc, char* argv[]) {
  CmdLine::StrOptRequired(&iniFile, "iniFile");
  CmdLine::StrOptRequired(&customClass, "customClass");
  CmdLine::StrOpt(&outputDir, "output", "./");
  CmdLine::SetUsage(usage);
  CmdLine::Parse(argc, argv);

  Config::Ini iniConfig;
  if (!iniConfig.Load(iniFile)) {
    return -1;
  }
  iniConfig.Dump();
  genFile(iniConfig);

  DemoConfig demoConfig;
  demoConfig.Load(iniFile);
  cout << "len = " << demoConfig.server.len.String() << endl;
  vector<Config::Value> lens = demoConfig.server.len.Split(",");
  for (int i = 0; i < lens.size(); i++) {
    cout << "  subLen=" << lens[i].Int32() << endl;
    cout << "  subLenStr=" << lens[i].String() << endl;
  }
  cout << "host = " << demoConfig.server.host.String() << endl;
  vector<Config::Value> hosts = demoConfig.server.host.Split(",");
  for (int i = 0; i < hosts.size(); i++) {
    cout << "  subHost="<< hosts[i].String() << endl;
  }
  cout << "MaxLoop = " << demoConfig.server.MaxLoop.Int64() << endl;
  cout << "Name = " << demoConfig.Busi.Name.String() << endl;
  cout << "Age = " << demoConfig.Busi.Age.UInt32() << endl;
  return 0;
}
